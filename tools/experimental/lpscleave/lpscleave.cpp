// Author(s): Maurice Laveaux
// Copyright: see the accompanying file COPYING or copy at
// https://github.com/mCRL2org/mCRL2/blob/master/COPYING
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//

#include "mcrl2/lps/stochastic_specification.h"
#include "mcrl2/lps/io.h"
#include "mcrl2/utilities/logger.h"
#include "mcrl2/utilities/input_output_tool.h"

#include <fstream>
#include <iostream>
#include <list>
#include <string>
#include <vector>

namespace mcrl2
{

using log::log_level_t;
using utilities::tools::input_output_tool;
using lps::stochastic_specification;

/// \brief Splits a string generated by [x,]* into a set of x's.
static
std::list<std::string> split_actions(const std::string& s)
{
  std::size_t pcount = 0;
  std::string a;
  std::list<std::string> result;
  for (std::string::const_iterator i = s.begin(); i != s.end(); ++i)
  {
    if (*i == ',' && pcount == 0)
    {
      result.push_back(a);
      a.clear();
    }
    else
    {
      if (*i == '(') ++pcount;
      else if (*i == ')') --pcount;
      a.push_back(*i);
    }
  }

  if (!a.empty())
  {
    result.push_back(a);
  }
  return result;
}

/// \brief Prints the parameters of the given LPS.
void print_parameters(const stochastic_specification& spec)
{
  bool first = true;
  for (auto& param : spec.process().process_parameters())
  {
    if (!first)
    {
      mCRL2log(log_level_t::info) << ", ";
    }
    mCRL2log(log_level_t::info) << param.name();
    first = false;
  }

  mCRL2log(log_level_t::info) << "\n";
}

/// \returns The list of parameters based on the given names.
data::variable_list verify_parameters(data::variable_list& param_list, const std::list<std::string>& parameters)
{
  data::variable_list result;
  for (const std::string& param : parameters)
  {
    auto it = std::find_if(param_list.begin(), param_list.end(), [&](const data::variable& var) -> bool { return static_cast<std::string>(var.name()) == param; } );
    if (it != param_list.end())
    {
      result.push_front(*it);
    }
    else
    {
      mCRL2log(log_level_t::warning) << "Warning parameter " << param << " is not a parameter of the process.\n";
    }
  }

  return result;
}

data::assignment_list project(const data::assignment_list& assignments, const data::variable_list& parameters)
{
  // Project the values of the initial process onto the cleave.
  data::assignment_list result;
  for (auto& assignment : assignments)
  {
    // If the variable is part of the cleave, then copy the assignment.
    if (std::find_if(parameters.begin(), parameters.end(), [&](const data::variable& param) -> bool { return param == assignment.lhs(); } ) != parameters.end())
    {
      result.push_front(assignment);
    }
  }

  return result;
}

/// \brief Performs the a naive cleave (synchronizes over all parameters)
stochastic_specification cleave(const stochastic_specification& spec, const data::variable_list& parameters)
{
  // Check sanity conditions, no timed or stochastic processes.
  auto& process = spec.process();

  if (process.has_time())
  {
    throw runtime_error("Cleave does not support timed processes");
  }

  // The parameters of the "other" component process.
  data::variable_list other_parameters;

  for (auto& param : process.process_parameters())
  {
    if (std::find(parameters.begin(), parameters.end(), param) == parameters.end())
    {
      other_parameters.push_front(param);
    }
  }

  // Extend the action specification with an actsync (that is unique) for every summand with the correct sorts.
  std::vector<process::action_label> sync_labels;

  // Change the summands to include the parameters of the other process and added the sync action.
  lps::stochastic_action_summand_vector cleave_summands;

  std::size_t summand_index = 0;
  for (auto& summand : process.action_summands())
  {
    // Add a summation for every parameter of the other process.
    data::variable_list variables = summand.summation_variables();
    for (auto& variable : other_parameters)
    {
      variables.push_front(variable);
    }

    // Create the actsync(p, e_i) action
    data::data_expression_list values;
    data::sort_expression_list sorts;
    for (auto& param : parameters)
    {
      values.push_front(data::data_expression(param));
      sorts.push_front(param.sort());
    }

    for (auto& param : other_parameters)
    {
      values.push_front(data::data_expression(param));
      sorts.push_front(param.sort());
    }

    for (auto& variable : summand.summation_variables())
    {
      values.push_front(data::data_expression(variable));
      sorts.push_front(variable.sort());
    }

    sync_labels.emplace_back(std::string("actsync_") += std::to_string(summand_index), sorts);

    process::action_list actions = summand.multi_action().actions();
    actions.push_front(process::action(sync_labels[summand_index], values));
    lps::multi_action action(actions);

    lps::stochastic_action_summand cleave_summand(variables, summand.condition(), action, project(summand.assignments(), parameters), summand.distribution());
    cleave_summands.push_back(cleave_summand);

    ++summand_index;
  }

  // Add the labels to the LPS action specification.
  auto cleave_action_labels = spec.action_labels();
  for (auto& label : sync_labels)
  {
    cleave_action_labels.push_front(label);
  }

  lps::deadlock_summand_vector no_deadlock_summands;
  lps::stochastic_linear_process cleave_process(parameters, no_deadlock_summands, cleave_summands);

  lps::stochastic_process_initializer cleave_initial(project(spec.initial_process().assignments(), parameters), spec.initial_process().distribution());

  // Create the new LPS and return it.
  return stochastic_specification(spec.data(), cleave_action_labels, spec.global_variables(), cleave_process, cleave_initial);
}

class lpscleave_tool : public input_output_tool
{
    typedef input_output_tool super;

  public:
    lpscleave_tool() : super(
        "lpscleave",
        "Maurice Laveaux",
        "Cleaves LPSs",
        "")
    {}

    bool run() override
    {
      stochastic_specification spec;
      load_lps(spec, input_filename());

      if (m_parameters.empty())
      {
        // Print the parameters and exit
        print_parameters(spec);
      }
      else
      {
        // Here, we should decide on a good cleaving.

        // For now, the parameters are given by the user.
        auto parameters = verify_parameters(spec.process().process_parameters(), m_parameters);

        // Cleave the process.
        stochastic_specification left_cleave = cleave(spec, parameters);

        // Save the resulting cleave.
        std::ofstream file(output_filename(), std::ios::binary);
        left_cleave.save(file, true);
      }

      return true;
    }

  protected:
    void add_options(utilities::interface_description& desc) override
    {
      super::add_options(desc);

      desc.add_option("parameters", utilities::make_mandatory_argument("PARAMS"), "A comma separated list of PARAMS that are used for the left process of the cleave.", 'p');
    }

    void parse_options(const utilities::command_line_parser& parser) override
    {
      super::parse_options(parser);

      if (parser.options.count("parameters"))
      {
        m_parameters = split_actions(parser.option_argument("parameters"));
      }
    }

  private:

    std::list<std::string> m_parameters;
};

} // namespace mcrl2

int main(int argc, char** argv)
{
  return mcrl2::lpscleave_tool().execute(argc, argv);
}
