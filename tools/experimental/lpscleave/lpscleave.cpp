// Author(s): Maurice Laveaux
// Copyright: see the accompanying file COPYING or copy at
// https://github.com/mCRL2org/mCRL2/blob/master/COPYING
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//

#include "mcrl2/lps/io.h"
#include "mcrl2/utilities/logger.h"
#include "mcrl2/utilities/input_output_tool.h"

#include "dependency_cleave.h"

#include <fstream>
#include <iostream>
#include <list>
#include <string>
#include <vector>

namespace mcrl2
{

using log::log_level_t;
using utilities::tools::input_output_tool;
using lps::stochastic_specification;

/// \brief Splits a string generated by [x,]* into a set of x's.
static
std::list<std::string> split_actions(const std::string& s)
{
  std::size_t pcount = 0;
  std::string a;
  std::list<std::string> result;
  for (std::string::const_iterator i = s.begin(); i != s.end(); ++i)
  {
    if (*i == ',' && pcount == 0)
    {
      result.push_back(a);
      a.clear();
    }
    else
    {
      if (*i == '(') ++pcount;
      else if (*i == ')') --pcount;
      a.push_back(*i);
    }
  }

  if (!a.empty())
  {
    result.push_back(a);
  }
  return result;
}

/// \brief Prints the parameters of the given LPS as comma separated values.
void print_parameters(const stochastic_specification& spec)
{
  mCRL2log(log_level_t::info) << "Parameters: ";

  bool first = true;
  for (auto& param : spec.process().process_parameters())
  {
    if (!first)
    {
      mCRL2log(log_level_t::info) << ", ";
    }
    mCRL2log(log_level_t::info) << param.name();
    first = false;
  }

  mCRL2log(log_level_t::info) << "\n";
}

/// \brief Projects a list of parameters based on a list of names.
/// \returns A list that only contains those parameters of the given parameters that are contained in the list of names.
data::variable_list project_parameters(const data::variable_list& parameters, const std::list<std::string>& names)
{
  data::variable_list result;
  for (const std::string& name : names)
  {
    auto it = std::find_if(parameters.begin(), parameters.end(), [&](const data::variable& var) -> bool { return static_cast<std::string>(var.name()) == name; } );
    if (it != parameters.end())
    {
      result.push_front(*it);
    }
    else
    {
      mCRL2log(log_level_t::warning) << "Warning parameter " << name << " is not a parameter of the process.\n";
    }
  }

  return result;
}

class lpscleave_tool : public input_output_tool
{
    typedef input_output_tool super;

  public:
    lpscleave_tool() : super(
        "lpscleave",
        "Maurice Laveaux",
        "Cleaves LPSs",
        "")
    {}

    bool run() override
    {
      stochastic_specification spec;

      if (input_filename() == "-")
      {
        load_lps(spec, std::cin);
      }
      else
      {
        load_lps(spec, input_filename());
      }

      if (m_parameters.empty())
      {
        // Print the parameters and exit
        print_parameters(spec);
      }
      else
      {
        // Here, we should decide on a good cleaving.

        // For now, the parameters are given by the user.
        auto parameters = project_parameters(spec.process().process_parameters(), m_parameters);

        // Cleave the process, requires the indices to be sorted.
        m_indices.sort();
        stochastic_specification left_cleave = dependency_cleave(spec, parameters, m_indices);

        // Save the resulting left-cleave.
        if (output_filename().empty())
        {
          left_cleave.save(std::cout, true);
        }
        else
        {
          std::ofstream file(output_filename(), std::ios::binary);
          left_cleave.save(file, true);
        }
      }

      return true;
    }

  protected:
    void add_options(utilities::interface_description& desc) override
    {
      super::add_options(desc);

      desc.add_option("parameters", utilities::make_mandatory_argument("PARAMS"), "A comma separated list of PARAMS that are used for the left process of the cleave.", 'p');
      desc.add_option("summands", utilities::make_mandatory_argument("INDICES"), "A comma separated list of INDICES of summands where the left process generates the action.", 's');
      desc.add_option("right", "The output is the right component of the cleave and the left component otherwise", 'r');
    }

    void parse_options(const utilities::command_line_parser& parser) override
    {
      super::parse_options(parser);

      if (parser.options.count("parameters"))
      {
        m_parameters = split_actions(parser.option_argument("parameters"));
      }

      if (parser.options.count("summands"))
      {
        std::list<std::string> indices = split_actions(parser.option_argument("summands"));
        for (auto& string : indices)
        {
          m_indices.emplace_back(std::stoul(string));
        }
      }

      if (parser.options.count("right"))
      {
        m_right_process = true;
      }
    }

  private:

    std::list<std::string> m_parameters;
    std::list<std::size_t> m_indices;
    bool m_right_process = false;
};

} // namespace mcrl2

int main(int argc, char** argv)
{
  return mcrl2::lpscleave_tool().execute(argc, argv);
}
