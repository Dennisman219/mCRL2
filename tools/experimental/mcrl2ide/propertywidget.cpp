// Author(s): Olav Bunte
// Copyright: see the accompanying file COPYING or copy at
// https://github.com/mCRL2org/mCRL2/blob/master/COPYING
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//

#include "propertywidget.h"

#include <QMessageBox>
#include <QSpacerItem>
#include <QStyleOption>
#include <QPainter>

PropertyWidget::PropertyWidget(Property* property, ProcessSystem* processSystem,
                               FileSystem* fileSystem, QWidget* parent)
    : QWidget(parent)
{
  this->property = property;
  this->processSystem = processSystem;
  this->fileSystem = fileSystem;
  this->parent = parent;
  verificationProcessId = -1;

  editPropertyDialog =
      new AddEditPropertyDialog(false, processSystem, fileSystem, this);
  connect(editPropertyDialog, SIGNAL(accepted()), this,
          SLOT(actionEditResult()));
  /* delete any obsolete property files generated by the dialog */
  connect(editPropertyDialog, SIGNAL(rejected()), fileSystem,
          SLOT(deleteUnlistedPropertyFiles()));

  /* create the label for the property name */
  propertyNameLabel = new QLabel(property->name);

  /* create the verify button */
  QPushButton* verifyButton = new QPushButton();
  verifyButton->setIcon(QIcon(":/icons/verify.png"));
  verifyButton->setIconSize(QSize(24, 24));
  verifyButton->setStyleSheet("QPushButton { border:none; }");
  verifyButton->setToolTip("Verify");
  connect(verifyButton, SIGNAL(clicked()), this, SLOT(actionVerify()));

  /* create the abort button for when a property is being verified */
  QPushButton* abortButton = new QPushButton();
  abortButton->setIcon(QIcon(":/icons/abort.png"));
  abortButton->setIconSize(QSize(24, 24));
  abortButton->setStyleSheet("QPushButton { border:none; }");
  abortButton->setToolTip("Abort verification");
  connect(abortButton, SIGNAL(clicked()), this,
          SLOT(actionAbortVerification()));

  /* create the label for when a property is true */
  QPixmap trueIcon(":/icons/true.png");
  QLabel* trueLabel = new QLabel();
  trueLabel->setPixmap(trueIcon.scaled(QSize(24, 24)));
  trueLabel->setToolTip("This property is true");

  /* create the label for when a property is false */
  QPixmap falseIcon(":/icons/false.png");
  QLabel* falseLabel = new QLabel();
  falseLabel->setPixmap(falseIcon.scaled(QSize(24, 24)));
  falseLabel->setToolTip("This property is false");

  /* stack the verification widgets */
  verificationWidgets = new QStackedWidget(this);
  verificationWidgets->setMaximumSize(QSize(30, 30));
  verificationWidgets->addWidget(verifyButton); /* index = 0 */
  verificationWidgets->addWidget(abortButton);  /* index = 1 */
  verificationWidgets->addWidget(trueLabel);    /* index = 2 */
  verificationWidgets->addWidget(falseLabel);   /* index = 3 */
  verificationWidgets->setCurrentIndex(0);

  /* create the edit button */
  editButton = new QPushButton();
  editButton->setIcon(QIcon(":/icons/edit.png"));
  editButton->setIconSize(QSize(24, 24));
  editButton->setStyleSheet("QPushButton { border:none; }");
  editButton->setToolTip("Edit property");
  connect(editButton, SIGNAL(clicked()), this, SLOT(actionEdit()));

  /* create the delete button */
  deleteButton = new QPushButton();
  deleteButton->setIcon(QIcon(":/icons/delete.png"));
  deleteButton->setIconSize(QSize(24, 24));
  deleteButton->setStyleSheet("QPushButton { border:none; }");
  deleteButton->setToolTip("Delete property");
  connect(deleteButton, SIGNAL(clicked()), this, SLOT(actionDelete()));

  /* lay them out */
  propertyLayout = new QHBoxLayout();
  propertyLayout->addStretch();
  propertyLayout->addWidget(propertyNameLabel);
  propertyLayout->addWidget(verificationWidgets);
  propertyLayout->addWidget(editButton);
  propertyLayout->addWidget(deleteButton);

  this->setLayout(propertyLayout);

  connect(processSystem, SIGNAL(processFinished(int)), this,
          SLOT(actionVerifyResult(int)));
}

PropertyWidget::~PropertyWidget()
{
  delete editPropertyDialog;
  delete propertyNameLabel;
  for (int i = 0; i < verificationWidgets->count(); i++)
  {
    delete verificationWidgets->widget(i);
  }
  delete verificationWidgets;
  delete editButton;
  delete deleteButton;
  delete propertyLayout;
}

void PropertyWidget::paintEvent(QPaintEvent* pe)
{
  Q_UNUSED(pe);
  QStyleOption o;
  o.initFrom(this);
  QPainter p(this);
  style()->drawPrimitive(QStyle::PE_Widget, &o, &p, this);
}

Property* PropertyWidget::getProperty()
{
  return this->property;
}

void PropertyWidget::setPropertyName(QString name)
{
  this->property->name = name;
  propertyNameLabel->setText(name);
}

void PropertyWidget::setPropertyText(QString text)
{
  this->property->text = text;
}

void PropertyWidget::resetWidget()
{
  verificationWidgets->setCurrentIndex(0);
  this->setStyleSheet("");
}

void PropertyWidget::actionVerify()
{
  /* check if the property isn't already being verified */
  if (verificationWidgets->currentIndex() != 1)
  {
    /* start the verification process */
    verificationProcessId = processSystem->verifyProperty(property);

    /* if starting the process was successful, change the buttons */
    if (verificationProcessId >= 0)
    {
      verificationWidgets->setCurrentIndex(1);
      editButton->setEnabled(false);
      deleteButton->setEnabled(false);
    }
  }
}

void PropertyWidget::actionVerifyResult(int processid)
{
  /* check if the process that has finished is the verification process of this
   *   property */
  if (processid == verificationProcessId)
  {
    /* get the result and apply it to the widget */
    QString result = processSystem->getResult(verificationProcessId);
    if (result == "true")
    {
      verificationWidgets->setCurrentIndex(2);
      this->setStyleSheet("PropertyWidget{background-color:rgb(153,255,153)}");
    }
    else if (result == "false")
    {
      verificationWidgets->setCurrentIndex(3);
      this->setStyleSheet("PropertyWidget{background-color:rgb(255,153,153)}");
    }
    else
    {
      verificationWidgets->setCurrentIndex(0);
    }
    editButton->setEnabled(true);
    deleteButton->setEnabled(true);
  }
}

void PropertyWidget::actionAbortVerification()
{
  processSystem->abortProcess(verificationProcessId);
}

void PropertyWidget::actionEdit()
{
  editPropertyDialog->setProperty(property);
  editPropertyDialog->setOldPropertyName(property->name);
  editPropertyDialog->resetFocus();
  if (editPropertyDialog->isVisible())
  {
    editPropertyDialog->activateWindow();
    editPropertyDialog->setFocus();
  }
  else
  {
    editPropertyDialog->show();
  }
}

void PropertyWidget::actionEditResult()
{
  /* if editing was successful (Edit button was pressed), change the property
   * we don't need to save to file as this is already done by the dialog */
  Property* newProperty = editPropertyDialog->getProperty();
  fileSystem->editProperty(property, newProperty);
  /* only make changes if the property changed */
  if (!property->equals(newProperty))
  {
    property = newProperty;
    propertyNameLabel->setText(property->name);
    resetWidget();
  }
}

void PropertyWidget::actionDelete()
{
  if (fileSystem->deleteProperty(property))
  {
    emit deleteMe(this);
  }
}
